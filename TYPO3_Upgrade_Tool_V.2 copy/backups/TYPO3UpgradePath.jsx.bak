import { useState, useEffect, useMemo } from "react";
import { ArrowLeft, ArrowRight, Check, ChevronDown, HelpCircle, Info, Copy, CheckCircle, Calendar, Database, Server } from "lucide-react";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Select, SelectTrigger, SelectContent, SelectItem } from "@/components/ui/select";

// Side navigation component for multi-step upgrade paths
function SideNavigation({ upgradePath, currentExpandedStep, onStepClick }) {
  return (
    <div className="sticky top-24 w-full md:w-56 self-start mb-6 md:mb-0">
      <div className="bg-orange-50 border border-orange-200 rounded-lg shadow-md p-4">
        <h3 className="font-medium text-lg text-gray-800 mb-3">Upgrade Steps</h3>
        <div className="space-y-2">
          {upgradePath.map((version, index) => (
            <button
              key={index}
              onClick={() => onStepClick(index)}
              className={`w-full text-left px-3 py-2 rounded-md text-sm transition-colors flex items-center ${
                currentExpandedStep === index
                  ? "bg-orange-200 text-orange-800 font-medium"
                  : "hover:bg-orange-100"
              }`}
            >
              <span className="w-5 h-5 rounded-full bg-orange-100 flex items-center justify-center text-xs mr-2 border border-orange-300">
                {index + 1}
              </span>
              <span className="truncate">TYPO3 {version.version}</span>
            </button>
          ))}
        </div>
      </div>
    </div>
  );
}

export default function TYPO3UpgradePath({ upgradeData, onBack, initialFromVersion, initialToVersion }) {
  const [sourceVersion, setSourceVersion] = useState("");
  const [targetVersion, setTargetVersion] = useState("");
  const [upgradePath, setUpgradePath] = useState([]);
  const [error, setError] = useState("");
  const [showGuide, setShowGuide] = useState(false);
  const [copiedCommand, setCopiedCommand] = useState(null);
  const [expandedSteps, setExpandedSteps] = useState({});
  const [currentExpandedStep, setCurrentExpandedStep] = useState(null);

  useEffect(() => {
    if (initialFromVersion) {
      setSourceVersion(initialFromVersion);
    }
    if (initialToVersion) {
      setTargetVersion(initialToVersion);
    }
    
    if (initialFromVersion && initialToVersion) {
      setShowGuide(true);
    }
  }, [initialFromVersion, initialToVersion]);

  const toggleSteps = (versionIndex) => {
    setExpandedSteps(prev => ({
      ...prev,
      [versionIndex]: !prev[versionIndex]
    }));
    
    if (!expandedSteps[versionIndex]) {
      setCurrentExpandedStep(versionIndex);
      
      // Scroll to the clicked step
      const element = document.getElementById(`upgrade-step-${versionIndex}`);
      if (element) {
        element.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    } else {
      setCurrentExpandedStep(null);
    }
  };

  const handleSideNavClick = (index) => {
    setExpandedSteps(prev => {
      const newState = {};
      // Close all steps
      Object.keys(prev).forEach(key => {
        newState[key] = false;
      });
      // Open the clicked step
      newState[index] = true;
      return newState;
    });
    
    setCurrentExpandedStep(index);
    
    // Scroll to the clicked step
    const element = document.getElementById(`upgrade-step-${index}`);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  };

  const availableVersions = useMemo(() => {
    return [...upgradeData]
      .map(v => v.version)
      .sort((a, b) => {
        const versPartsA = a.split('.').map(Number);
        const versPartsB = b.split('.').map(Number);
        
        if (versPartsA[0] !== versPartsB[0]) {
          return versPartsA[0] - versPartsB[0];
        }
        return versPartsA[1] - versPartsB[1];
      });
  }, [upgradeData]);

  const compareVersions = (versionA, versionB) => {
    const partsA = versionA.split('.').map(Number);
    const partsB = versionB.split('.').map(Number);
    
    if (partsA[0] !== partsB[0]) {
      return partsA[0] - partsB[0];
    }
    
    return partsA[1] - partsB[1];
  };

  const findVersionInfo = (version) => {
    return upgradeData.find(v => v.version === version) || { version };
  };

  useEffect(() => {
    if (!sourceVersion || !targetVersion) {
      setUpgradePath([]);
      return;
    }

    if (sourceVersion === targetVersion) {
      setError("Source and target versions cannot be the same");
      setUpgradePath([]);
      return;
    }

    const sourceIdx = availableVersions.indexOf(sourceVersion);
    const targetIdx = availableVersions.indexOf(targetVersion);

    if (sourceIdx === -1 || targetIdx === -1) {
      setError("Invalid version selection");
      setUpgradePath([]);
      return;
    }

    if (compareVersions(sourceVersion, targetVersion) > 0) {
      setError("Downgrading is not supported. Target version must be higher than source version.");
      setUpgradePath([]);
      return;
    }

    setError("");

    const path = [];
    
    const sourceMajor = parseInt(sourceVersion.split('.')[0]);
    const targetMajor = parseInt(targetVersion.split('.')[0]);
    
    path.push(findVersionInfo(sourceVersion));

    if (sourceMajor < targetMajor) {
      for (let major = sourceMajor; major <= targetMajor; major++) {
        if (major === sourceMajor) continue;
        
        const majorVersions = availableVersions.filter(v => parseInt(v.split('.')[0]) === major);
        
        if (majorVersions.length > 0) {
          if (major === targetMajor) {
            if (path[path.length - 1].version !== targetVersion) {
              path.push(findVersionInfo(targetVersion));
            }
          } else {
            const ltsVersions = upgradeData
              .filter(v => parseInt(v.version.split('.')[0]) === major && v.type.toLowerCase() === 'lts')
              .map(v => v.version);
              
            if (ltsVersions.length > 0) {
              const sorted = [...ltsVersions].sort(compareVersions);
              const highestLTS = sorted[sorted.length - 1];
              path.push(findVersionInfo(highestLTS));
            } else {
              const sorted = [...majorVersions].sort(compareVersions);
              const highestVersion = sorted[sorted.length - 1];
              path.push(findVersionInfo(highestVersion));
            }
          }
        }
      }
    } else {
      if (path[path.length - 1].version !== targetVersion) {
        path.push(findVersionInfo(targetVersion));
      }
    }

    setUpgradePath(path);
    
    if (path.length > 0) {
      const initialExpandedState = {};
      path.forEach((_, index) => {
        initialExpandedState[index] = false;
      });
      setExpandedSteps(initialExpandedState);
    }
    
  }, [sourceVersion, targetVersion, availableVersions, upgradeData]);

  const showSelectedUpgrade = () => {
    if (!sourceVersion || !targetVersion) {
      setError("Please select both source and target versions first");
      return;
    }
    
    if (sourceVersion === targetVersion) {
      setError("Source and target versions cannot be the same");
      return;
    }
    
    if (compareVersions(sourceVersion, targetVersion) > 0) {
      setError("Downgrading is not supported. Target version must be higher than source version.");
      return;
    }
    
    setError("");
    
    setShowGuide(true);
    
    setExpandedSteps(prev => ({
      ...prev,
      0: true
    }));
    
    setCurrentExpandedStep(0);
  };

  const copyCommand = (command, index) => {
    navigator.clipboard.writeText(command).then(() => {
      setCopiedCommand(index);
      setTimeout(() => setCopiedCommand(null), 2000);
    });
  };

  // Check if we have 3 or more steps to show the side navigation
  // FORCE the side navigation to always appear when there are any steps
  const showSideNav = true; // upgradePath.length >= 2 && showGuide;

  return (
    <div className="min-h-screen bg-gray-50 pb-10">
      <header className="typo3-header mb-6">
        <div className="container mx-auto px-4 py-2">
          <div className="flex items-center">
            <button 
              onClick={onBack}
              className="mr-4 p-2 rounded-full bg-white/10 hover:bg-white/20 transition-colors"
            >
              <ArrowLeft size={20} />
            </button>
            <h1 className="typo3-logo">TYPO3 Upgrade Path Calculator</h1>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4">
        <Card className="mb-8">
          <CardContent className="p-6">
            <h2 className="text-xl font-semibold mb-6">Calculate Upgrade Path</h2>
            
            <div className="grid md:grid-cols-3 gap-6 items-center">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Current Version
                </label>
                <Select value={sourceVersion} onValueChange={setSourceVersion}>
                  <SelectTrigger className="w-full">
                    {sourceVersion || "Select source version"}
                  </SelectTrigger>
                  <SelectContent>
                    {availableVersions.map((version) => (
                      <SelectItem key={`source-${version}`} value={version}>
                        TYPO3 {version}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              
              <div className="flex justify-center">
                <ArrowRight size={24} className="text-gray-400" />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Target Version
                </label>
                <Select value={targetVersion} onValueChange={setTargetVersion}>
                  <SelectTrigger className="w-full">
                    {targetVersion || "Select target version"}
                  </SelectTrigger>
                  <SelectContent>
                    {availableVersions.map((version) => (
                      <SelectItem key={`target-${version}`} value={version}>
                        TYPO3 {version}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            <div className="mt-6 flex justify-center">
              <button 
                onClick={showSelectedUpgrade}
                className="px-6 py-2 border border-[rgb(249,115,22)] rounded-md text-[rgb(249,115,22)] hover:text-white hover:bg-[rgb(249,115,22)] transition-colors"
              >
                Show Upgrade Steps From Selected Versions
              </button>
            </div>
            
            {error && (
              <div className="mt-5 p-4 bg-red-50 border-l-4 border-red-400 text-red-700 rounded">
                <p>{error}</p>
              </div>
            )}
            
            <div className="mt-6 text-sm text-gray-600">
              <p className="flex items-center gap-2">
                <Info size={16} className="text-[rgb(249,115,22)]" />
                Select your current TYPO3 version and the version you want to upgrade to.
                We'll calculate the recommended upgrade path for you.
              </p>
            </div>
          </CardContent>
        </Card>
        
        {upgradePath.length > 0 && (
          <div>
            <h2 className="text-2xl font-bold mb-6">Recommended Upgrade Path</h2>
            
            {/* Debug information */}
            <div className="bg-red-50 border-l-4 border-red-400 p-4 mb-6 rounded-md">
              <h3 className="font-bold text-red-800">Debug Information:</h3>
              <p className="text-red-700">Upgrade Path Length: {upgradePath.length}</p>
              <p className="text-red-700">Show Guide: {showGuide ? 'true' : 'false'}</p>
              <p className="text-red-700">Show Side Nav: {showSideNav ? 'true' : 'false'}</p>
            </div>
            
            {/* Always show navigation bar at the top */}
            <div className="sticky top-20 z-10 bg-orange-50 border border-orange-200 rounded-lg p-4 shadow-md mb-8">
              <h3 className="font-medium text-lg text-gray-800 mb-3">TYPO3 Upgrade Steps</h3>
              <div className="flex flex-wrap gap-2">
                {upgradePath.map((version, index) => (
                  <button
                    key={index}
                    onClick={() => handleSideNavClick(index)}
                    className={`px-4 py-2 rounded-md text-sm transition-colors flex items-center ${
                      currentExpandedStep === index
                        ? "bg-orange-500 text-white font-medium"
                        : "bg-white hover:bg-orange-100 border border-orange-200"
                    }`}
                  >
                    <span className="w-6 h-6 rounded-full bg-orange-100 flex items-center justify-center text-sm mr-2 border border-orange-300 text-orange-800">
                      {index + 1}
                    </span>
                    <span>TYPO3 {version.version}</span>
                  </button>
                ))}
              </div>
            </div>
            
            <div className="space-y-6">
              {upgradePath.map((version, index) => (
                <div key={version.version} id={`upgrade-step-${index}`} className="bg-white rounded-lg shadow-md relative">
                  <div className="absolute -left-3 top-6 flex items-center justify-center w-7 h-7 rounded-full bg-primary text-white font-bold z-10">
                    {index + 1}
                  </div>
                  
                  <div className="p-6 pl-10">
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="text-lg font-semibold">TYPO3 {version.version}</h3>
                      {version.type && (
                        <Badge className={`typo3-badge-${version.type}`}>{version.type.toUpperCase()}</Badge>
                      )}
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-5 mb-4">
                      <div className="flex items-start space-x-2">
                        <Calendar className="h-5 w-5 text-[rgb(249,115,22)] flex-shrink-0 mt-0.5" />
                        <div>
                          <h4 className="text-sm font-medium text-gray-700">Dates</h4>
                          {version.release_date && (
                            <p className="text-xs text-gray-600">
                              Released: {new Date(version.release_date).toLocaleDateString()}
                            </p>
                          )}
                          {version.support && (
                            <>
                              <p className="text-xs text-gray-600">
                                Support until: {version.support.active_until}
                              </p>
                              <p className="text-xs text-gray-600">
                                Security until: {version.support.security_until}
                              </p>
                            </>
                          )}
                        </div>
                      </div>
                      
                      <div className="flex items-start space-x-2">
                        <Server className="h-5 w-5 text-green-500 flex-shrink-0 mt-0.5" />
                        <div>
                          <h4 className="text-sm font-medium text-gray-700">System Requirements</h4>
                          {version.requirements && (
                            <>
                              <p className="text-xs text-gray-600">
                                PHP: {version.requirements.php}
                              </p>
                              <p className="text-xs text-gray-600">
                                MySQL/MariaDB: {version.requirements.mysql}
                              </p>
                              <p className="text-xs text-gray-600">
                                Composer: {version.requirements.composer}
                              </p>
                            </>
                          )}
                        </div>
                      </div>
                      
                      <div className="flex items-start space-x-2">
                        <Database className="h-5 w-5 text-amber-500 flex-shrink-0 mt-0.5" />
                        <div>
                          <h4 className="text-sm font-medium text-gray-700">Migration Requirements</h4>
                          <p className="text-xs text-gray-600">
                            Database changes: 
                            {version.db_changes ? 
                              <span className="text-amber-600 font-medium"> Yes</span> : 
                              <span className="text-green-600 font-medium"> No</span>
                            }
                          </p>
                          <p className="text-xs text-gray-600">
                            Install Tool migrations: 
                            {version.install_tool_migrations ? 
                              <span className="text-amber-600 font-medium"> Yes</span> : 
                              <span className="text-green-600 font-medium"> No</span>
                            }
                          </p>
                        </div>
                      </div>
                    </div>
                    
                    {showGuide && (
                      <button 
                        onClick={() => toggleSteps(index)}
                        className="w-full flex items-center justify-between p-4 mt-3 bg-gray-50 hover:bg-gray-100 rounded-md transition-colors"
                      >
                        <span className="font-medium">Upgrade Steps</span>
                        <ChevronDown 
                          size={20} 
                          className={`text-gray-500 transition-transform ${expandedSteps[index] ? 'rotate-180' : ''}`} 
                        />
                      </button>
                    )}
                    
                    {showGuide && expandedSteps[index] && (
                      <div className="mt-4 pt-2 border-t">                          
                        <div className="bg-gray-50 p-4 rounded-md mb-3">
                          <div className="flex justify-between items-center mb-2">
                            <h5 className="font-medium">1. Backup your system</h5>
                            <button
                              onClick={() => copyCommand(`mkdir -p backups && tar -czf backups/typo3_backup_before_${version.version}.tar.gz public typo3conf config composer.json composer.lock`, `backup-${index}`)}
                              className="text-gray-500 hover:text-gray-700 flex items-center gap-1"
                            >
                              {copiedCommand === `backup-${index}` ? <CheckCircle size={16} className="text-green-500" /> : <Copy size={16} />}
                              <span className="text-xs">Copy</span>
                            </button>
                          </div>
                          <pre className="bg-gray-900 text-gray-100 p-2 rounded text-sm overflow-x-auto">
                            {`mkdir -p backups && tar -czf backups/typo3_backup_before_${version.version}.tar.gz public typo3conf config composer.json composer.lock`}
                          </pre>
                          <p className="text-sm mt-2 text-gray-600">Always backup your system before performing an upgrade.</p>
                        </div>
                        
                        <div className="bg-gray-50 p-4 rounded-md mb-3">
                          <div className="flex justify-between items-center mb-2">
                            <h5 className="font-medium">2. Update composer.json</h5>
                            <button
                              onClick={() => copyCommand(`composer require typo3/cms-core:^${version.version} --update-with-dependencies`, `composer-${index}`)}
                              className="text-gray-500 hover:text-gray-700 flex items-center gap-1"
                            >
                              {copiedCommand === `composer-${index}` ? <CheckCircle size={16} className="text-green-500" /> : <Copy size={16} />}
                              <span className="text-xs">Copy</span>
                            </button>
                          </div>
                          <pre className="bg-gray-900 text-gray-100 p-2 rounded text-sm overflow-x-auto">
                            {`composer require typo3/cms-core:^${version.version} --update-with-dependencies`}
                          </pre>
                          <p className="text-sm mt-2 text-gray-600">Update your composer dependencies to the new TYPO3 version.</p>
                        </div>
                        
                        {version.db_changes && (
                          <div className="bg-gray-50 p-4 rounded-md mb-3">
                            <div className="flex justify-between items-center mb-2">
                              <h5 className="font-medium">3. Run Database Compare in Install Tool</h5>
                              <button
                                onClick={() => copyCommand(`vendor/bin/typo3 database:updateschema`, `db-${index}`)}
                                className="text-gray-500 hover:text-gray-700 flex items-center gap-1"
                              >
                                {copiedCommand === `db-${index}` ? <CheckCircle size={16} className="text-green-500" /> : <Copy size={16} />}
                                <span className="text-xs">Copy</span>
                              </button>
                            </div>
                            <pre className="bg-gray-900 text-gray-100 p-2 rounded text-sm overflow-x-auto">
                              {`vendor/bin/typo3 database:updateschema`}
                            </pre>
                            <p className="text-sm mt-2 text-gray-600">Run database compare to update the database schema to match the new version.</p>
                          </div>
                        )}
                        
                        {version.install_tool_migrations && (
                          <div className="bg-gray-50 p-4 rounded-md mb-3">
                            <div className="flex justify-between items-center mb-2">
                              <h5 className="font-medium">4. Run Upgrade Wizards</h5>
                              <button
                                onClick={() => copyCommand(`vendor/bin/typo3 upgrade:run`, `upgrade-${index}`)}
                                className="text-gray-500 hover:text-gray-700 flex items-center gap-1"
                              >
                                {copiedCommand === `upgrade-${index}` ? <CheckCircle size={16} className="text-green-500" /> : <Copy size={16} />}
                                <span className="text-xs">Copy</span>
                              </button>
                            </div>
                            <pre className="bg-gray-900 text-gray-100 p-2 rounded text-sm overflow-x-auto">
                              {`vendor/bin/typo3 upgrade:run`}
                            </pre>
                            <p className="text-sm mt-2 text-gray-600">Run the upgrade wizards to migrate data and configuration.</p>
                          </div>
                        )}
                        
                        <div className="bg-gray-50 p-4 rounded-md mb-3">
                          <div className="flex justify-between items-center mb-2">
                            <h5 className="font-medium">5. Clear All Caches</h5>
                            <button
                              onClick={() => copyCommand(`vendor/bin/typo3 cache:flush`, `cache-${index}`)}
                              className="text-gray-500 hover:text-gray-700 flex items-center gap-1"
                            >
                              {copiedCommand === `cache-${index}` ? <CheckCircle size={16} className="text-green-500" /> : <Copy size={16} />}
                              <span className="text-xs">Copy</span>
                            </button>
                          </div>
                          <pre className="bg-gray-900 text-gray-100 p-2 rounded text-sm overflow-x-auto">
                            {`vendor/bin/typo3 cache:flush`}
                          </pre>
                          <p className="text-sm mt-2 text-gray-600">Flush all caches to ensure the system uses the new version's code.</p>
                        </div>
                        
                        <div className="mt-3 text-sm text-gray-600">
                          <p className="flex items-start gap-2">
                            <Info size={16} className="text-[rgb(249,115,22)] flex-shrink-0 mt-1" />
                            <span>After completing these steps, log in to the TYPO3 backend and verify that everything is working correctly before proceeding to the next version upgrade.</span>
                          </p>
                        </div>
                        
                        {/* Navigation buttons between steps */}
                        <div className="mt-6 flex justify-between pt-3 border-t">
                          <button 
                            onClick={() => handleSideNavClick(Math.max(0, index - 1))}
                            className={`flex items-center px-3 py-2 rounded-md text-sm transition-colors ${
                              index === 0 ? 'text-gray-400 cursor-not-allowed' : 'text-gray-700 hover:bg-gray-100'
                            }`}
                            disabled={index === 0}
                          >
                            <ArrowLeft size={16} className="mr-2" />
                            Previous Step
                          </button>
                          
                          <button
                            onClick={() => handleSideNavClick(Math.min(upgradePath.length - 1, index + 1))}
                            className={`flex items-center px-3 py-2 rounded-md text-sm transition-colors ${
                              index === upgradePath.length - 1 ? 'text-gray-400 cursor-not-allowed' : 'text-gray-700 hover:bg-gray-100'
                            }`}
                            disabled={index === upgradePath.length - 1}
                          >
                            Next Step
                            <ArrowRight size={16} className="ml-2" />
                          </button>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
            
            <div className="mt-8 bg-orange-50 border-l-4 border-[rgb(249,115,22)] p-5 rounded-md">
              <div className="flex">
                <div className="flex-shrink-0">
                  <Info className="h-5 w-5 text-[rgb(249,115,22)]" />
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-orange-800">Upgrade Path Information</h3>
                  <div className="mt-2 text-sm text-orange-700">
                    <p>
                      This upgrade path recommends upgrading through {upgradePath.length} versions.
                      Always upgrade one TYPO3 version at a time, following the recommended path.
                    </p>
                    <p className="mt-1">
                      For LTS (Long Term Support) to LTS upgrades, it's generally recommended to upgrade
                      to each intermediate LTS version rather than skipping versions.
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}